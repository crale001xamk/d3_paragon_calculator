{"version":3,"sources":["components/TopNav.js","components/Seasonal.js","components/TargetLevel.js","components/UserRiftingSpeed.js","App.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","position","margin","title","textDecoration","color","marginBottom","indicator","backgroundColor","TopNav","classes","useState","path","window","location","pathname","currentTab","value","setValue","Typography","component","Link","to","className","variant","AppBar","Tabs","TabIndicatorProps","style","background","textColor","role","onChange","event","newValue","Tab","label","textbox","spacing","paperi","Seasonal","props","level_1_input","useRef","level_2_input","errPrompt","setErrPrompt","sumResult","setSumResult","calcSum","lvl_1","lvl_2","result","data","resultLevel","filtered","Object","keys","filter","ele","length","Number","onSubmit","e","preventDefault","err","current","level_1","level_2","entries","Box","display","flexDirection","TextField","name","type","inputRef","error","Boolean","helperText","placeholder","disabled","Button","fullWidth","marginTop","trophy","chip","solu","width","solu2","boksi","TargetLevel","level_current","level_target","selectedChip","setSelectedChip","msg","setMsg","errTextSelectChip","setErrTextSelectChip","showDeets","setShowDeets","calcDeets","lvl_cur","lvl_tar","currentxp","expNeeded","runs","gr_data","grSpeedList","gr","toFixed","time","m","hours","parseInt","minutes","hourText","minuteText","hoursAndMinutes","min","leggos","primals","expPerRun","numeral","format","showLeggos","newObj","at","console","log","size","Divider","map","key","idx","icon","prcntSpeed","Chip","clickable","onClick","fullwidth","Paper","TableContainer","Table","TableHead","TableRow","TableCell","align","sol2","textgreen","fontSize","textred","UserRiftingSpeed","gr_level","addToList","newItem","push","calcExpHour","some","o","isFinite","String","List","arr","sort","b","a","sortDesc","ListItem","divider","ListItemText","primary","secondary","expHr","ListItemIcon","IconButton","edge","indeksi","calcFastest","setGrSpeedList","deleteFromList","App","normalizedSpeed","i","d3_data","gr_completion_reward_exp","winnerIdx","calcPercentSpeed","bestRunExp","useEffect","localStorage","getItem","JSON","parse","setItem","stringify","removeItem","Container","maxWidth","paragon_total_exp_req","exact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.345e5352.chunk.js","sourcesContent":["import { AppBar, Typography, Tabs, Tab } from '@material-ui/core';\r\nimport { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n      position:\"relative\",\r\n      margin:\"15\"\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n      textDecoration: \"none\",\r\n      color: \"inherit\",\r\n      marginBottom:\"5px\",\r\n    },\r\n    indicator: {\r\n        backgroundColor:\"white\"\r\n    }\r\n  }));\r\n\r\nfunction TopNav() {\r\n    const classes = useStyles();\r\n\r\n    const handleChange = (event, newValue) => {\r\n      setValue(newValue);\r\n    }\r\n\r\n    const currentTab = () => {\r\n        let path = window.location.pathname\r\n        if (path === \"/d3_paragon_calculator/\") return 0\r\n        else if (path === \"/d3_paragon_calculator/compare\") return 1\r\n    }\r\n\r\n    const [value, setValue] = useState(currentTab());\r\n\r\n    return(\r\n        <>\r\n        <Typography component={Link} to=\"/\" className={classes.title} variant=\"h5\">\r\n            Diablo 3 paragon calculator for solo play\r\n            </Typography>\r\n        \r\n        <AppBar className={classes.root}>\r\n\r\n                <Tabs\r\n                    TabIndicatorProps={{style: {background:'white'}}}\r\n                    value={value}\r\n                    textColor=\"inherit\"\r\n                    role=\"tabpanel\"\r\n                    onChange={handleChange}\r\n                >\r\n                    <Tab value={0} label=\"Compare runs\" component={Link} to=\"/d3_paragon_calculator/\" />\r\n                    <Tab value={1} label=\"Target level\" component={Link} to=\"/d3_paragon_calculator/compare\" />\r\n                    \r\n                 \r\n                </Tabs>\r\n\r\n                {/* <IconButton component={Link} to=\"/seasonal\" edge=\"end\" aria-label=\"search\" color=\"inherit\">\r\n                    <Typography>Add two levels</Typography>\r\n                </IconButton> */}\r\n\r\n         \r\n        </AppBar>\r\n        </>\r\n    );\r\n}\r\nexport default TopNav;","import { Box, Typography, Button, TextField } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useRef, useState } from 'react';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n    \r\n    },\r\n    textbox: {\r\n            margin: theme.spacing(1),\r\n\r\n    },\r\n    paperi: {\r\n        margin: \"10px\"\r\n    }    \r\n  }));\r\n\r\nfunction Seasonal(props) {\r\n    const level_1_input = useRef();\r\n    const level_2_input = useRef();\r\n    const classes = useStyles();\r\n    const [errPrompt, setErrPrompt] = useState({});\r\n    const [sumResult, setSumResult] = useState(0);\r\n\r\n    const formHandler = (e) => {\r\n        e.preventDefault();\r\n        let err = {}\r\n        \r\n        if (!level_1_input.current.value){\r\n            err = {...err, level_1 : \"input paragon level\"}\r\n        }\r\n        if (!level_2_input.current.value){\r\n            err = {...err, level_2 : \"input paragon level\"}\r\n        }\r\n  \r\n        if (Object.entries(err).length > 0) {\r\n            setErrPrompt({...err});\r\n          } else {\r\n            setErrPrompt({});\r\n            setSumResult(calcSum(level_2_input.current.value, level_1_input.current.value));\r\n            }\r\n    }\r\n\r\n    const calcSum = (lvl_1, lvl_2) => {\r\n        let firstlevel = props.data[lvl_1];\r\n        let secondlevel = props.data[lvl_2];\r\n        let result = firstlevel + secondlevel;\r\n        let resultLevel = 0;\r\n        var filtered = Object.keys(props.data).filter(ele => props.data[ele] <= result);\r\n        \r\n        // function ebhaves strngely if 10000+\r\n        // add check\r\n\r\n        if (props.data[filtered.length] > result) {\r\n            resultLevel = Number(filtered.length) - 1;\r\n        } else if (props.data[filtered.length] = result) {\r\n            resultLevel = Number(filtered.length);\r\n        }\r\n        return(resultLevel);\r\n    }\r\n\r\n  return (\r\n    <form onSubmit={formHandler}>\r\n    <Box className={classes.root}>\r\n        <Typography>\r\n            Add two paragon levels together\r\n        </Typography>\r\n    <Box display=\"flex\" flexDirection=\"row\">\r\n        <TextField\r\n        className={classes.textbox}\r\n        name=\"level_1\"\r\n        label=\"Paragon level\"\r\n        type=\"number\"\r\n        inputRef={level_1_input}\r\n        error={Boolean(errPrompt.level_1)}\r\n        helperText={errPrompt.level_1}\r\n        variant=\"filled\"\r\n        placeholder=\"Input level...\"\r\n         //onChange={ inputHandler }\r\n    />\r\n        <Typography variant=\"h5\">+</Typography>\r\n        <TextField\r\n        className={classes.textbox}\r\n        name=\"level_2\"\r\n        label=\"Paragon level\"\r\n        type=\"number\"\r\n        placeholder=\"Input level...\"\r\n        inputRef={level_2_input}\r\n        error={Boolean(errPrompt.level_2)}\r\n        helperText={errPrompt.level_2}\r\n        variant=\"filled\"\r\n     //   onChange={ inputHandler }\r\n      />\r\n      <Typography variant=\"h5\">=</Typography>\r\n      <TextField\r\n        className={classes.textbox}\r\n        name=\"result\"\r\n        label=\"result\"\r\n        type=\"number\"\r\n        value = {sumResult}\r\n     //   variant=\"filled\"\r\n        disabled={true}\r\n        placeholder=\"Input level...\"\r\n      />\r\n    </Box>\r\n\r\n    <Button\r\n          type=\"submit\"\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          fullWidth\r\n          name=\"btn2\"\r\n          style={{marginBottom : 10, marginTop : 10}}\r\n          \r\n        > Calculate </Button>\r\n\r\n    </Box>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Seasonal;","import { Box, Typography, Button, TextField, Paper } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useRef, useState } from 'react';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport EmojiEventsIcon from '@material-ui/icons/EmojiEvents';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport numeral from 'numeral';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        marginTop:\"10px\"\r\n    },\r\n    textbox: {\r\n            margin: theme.spacing(1),\r\n\r\n    },\r\n    paperi: {\r\n        margin: \"10px\"\r\n    },\r\n    trophy:{\r\n        color:\"gold\"\r\n    },\r\n    chip:{\r\n        margin: \"10px\"\r\n    },\r\n    solu: {\r\n        width:\"50px\"\r\n    },\r\n    solu2:{\r\n        width:\"70px\"\r\n    },\r\n    boksi:{\r\n        marginTop:\"10px\"\r\n    },\r\n\r\n  }));\r\n\r\nfunction TargetLevel(props) {\r\n    const level_current = useRef();\r\n    const level_target = useRef();\r\n    const classes = useStyles();\r\n    const [errPrompt, setErrPrompt] = useState({});\r\n    const [selectedChip, setSelectedChip] = useState();\r\n    const [msg, setMsg] = useState([]);\r\n    const [errTextSelectChip, setErrTextSelectChip] = useState();\r\n    const [showDeets, setShowDeets] = useState(false);\r\n    \r\n\r\n    const formHandler = (e) => {\r\n        e.preventDefault();\r\n        let err = {}\r\n        \r\n        if (!level_current.current.value){\r\n            err = {...err, level_current : \"input paragon level\"}\r\n        } else if (Number(level_current.current.value) > Number(level_target.current.value)) {\r\n            console.log(typeof level_current.current.value, level_target.current.value)\r\n            err = {...err, level_current : \"Current level cannot be greater then target level\"}\r\n        } else if (Number(level_current.current.value) === Number(level_target.current.value)){\r\n            err = {...err, level_current : \"Current level should not be the same as the target level\"}\r\n        } else if (Number(level_current.current.value) < 1 || Number(level_current.current.value) > 9999){\r\n            err = {...err, level_current : \"Level needs to be between 1 and 9999\"}\r\n        }\r\n\r\n        if (!level_target.current.value){\r\n            err = {...err, level_target : \"input paragon level\"}\r\n        } else if (Number(level_target.current.value) < Number(level_current.current.value)) {\r\n            err = {...err, level_target : \"Target level cannot be smaller then current level\"}\r\n        } else if (Number(level_target.current.value) === Number(level_current.current.value)){\r\n            err = {...err, level_target : \"Target level should not be the same as the current level\"}\r\n        } else if (Number(level_target.current.value) < 2 || Number(level_target.current.value) > 10000){\r\n            err = {...err, level_target : \"Level needs to be between 2 and 10000\"}\r\n        }\r\n\r\n        if (selectedChip == null){\r\n            setErrTextSelectChip(\"Select a run to use in calculations\");\r\n        }\r\n\r\n        if (selectedChip != null && Object.entries(err).length > 0) {\r\n            setErrPrompt({...err});\r\n            setErrTextSelectChip();\r\n        } else if ( selectedChip == null && Object.entries(err).length == 0 ) {\r\n            setErrPrompt({});\r\n        } else if ( selectedChip == null && Object.entries(err).length > 0 ) {\r\n            setErrPrompt({...err});\r\n        }\r\n        \r\n        else {\r\n            setErrPrompt({});\r\n            calcDeets(level_current.current.value, level_target.current.value)\r\n            setShowDeets(true);\r\n            setErrTextSelectChip();\r\n        }\r\n    }\r\n    const hoursAndMinutes = (m) => {\r\n        let hours = parseInt(m / 60);\r\n        let minutes = (m % 60).toFixed(2);\r\n        let hourText = \"\";\r\n        let minuteText = \"\";\r\n\r\n        ( hours != 1 ) ? hourText = \"hours\" : hourText = \"hour\";\r\n        ( minutes != 1 ) ? minuteText = \"minutes\" : minuteText = \"minute\";\r\n\r\n        return(\r\n             <Typography>{`${hours} ${hourText} and ${minutes} ${minuteText}`}</Typography>\r\n        );\r\n    }\r\n\r\n    const calcDeets = (lvl_cur, lvl_tar) => {\r\n        let currentxp = props.data[lvl_cur];\r\n        let targetxp = props.data[lvl_tar];\r\n        let expNeeded = targetxp - currentxp;\r\n        let runs = (expNeeded / props.gr_data[props.grSpeedList[selectedChip].gr]).toFixed(2);\r\n        let time = hoursAndMinutes((runs * props.grSpeedList[selectedChip].min).toFixed(2));\r\n        let leggos = (props.grSpeedList[selectedChip].gr >= 90) ? (runs * 12).toFixed(2) : null;\r\n        let primals = (leggos / 400 ).toFixed(2);\r\n        let expPerRun = `@ ${numeral(props.gr_data[props.grSpeedList[selectedChip].gr]).format('0.0 a')} exp/run`\r\n        let showLeggos = (props.grSpeedList[selectedChip].gr >= 90) ? true : false;\r\n        \r\n        let newObj = [\r\n            {lvl_cur: lvl_cur},\r\n            {lvl_tar: lvl_tar},\r\n            {expNeeded : expNeeded},\r\n            {at : `Gr ${props.grSpeedList[selectedChip].gr} / ${props.grSpeedList[selectedChip].min} min`},\r\n            {runs: runs},\r\n            {time : time},\r\n            {leggos : leggos},\r\n            {primals : primals},\r\n            {expPerRun : expPerRun},\r\n            {showLeggos : showLeggos},\r\n        ]\r\n        setMsg(newObj);\r\n    }\r\n\r\n  return (\r\n<>\r\n    <form onSubmit={formHandler}>\r\n    <Box className={classes.root}>\r\n    \r\n        <Box  className={classes.boksi} display=\"flex\" flexDirection=\"column\">\r\n    \r\n            <TextField\r\n            className={classes.textbox}\r\n            name=\"level_current\"\r\n            label=\"Current level\"\r\n            type=\"number\"\r\n            inputRef={level_current}\r\n            error={Boolean(errPrompt.level_current)}\r\n            helperText={errPrompt.level_current}\r\n            variant=\"filled\"\r\n            placeholder=\"Input current level...\"\r\n            fullWidth={true}\r\n            size=\"small\"\r\n        />\r\n            \r\n            <TextField\r\n            className={classes.textbox}\r\n            name=\"level_target\"\r\n            label=\"Target level\"\r\n            type=\"number\"\r\n            placeholder=\"Input target level...\"\r\n            inputRef={level_target}\r\n            error={Boolean(errPrompt.level_target)}\r\n            helperText={errPrompt.level_target}\r\n            variant=\"filled\"\r\n            fullWidth={true}\r\n            size=\"small\"\r\n        />\r\n\r\n        </Box>\r\n\r\n        <Divider variant=\"middle\" />\r\n\r\n        <Box>\r\n        { props.grSpeedList.map( (key, idx) => {\r\n            let icon;\r\n            let color =\"default\"\r\n            if (props.grSpeedList[idx].prcntSpeed == 100) {\r\n                icon = <EmojiEventsIcon className={classes.trophy}/>;\r\n            // color = \"primary\"\r\n            }\r\n            if (selectedChip == idx){\r\n                color = \"secondary\"\r\n            }\r\n\r\n            return (\r\n\r\n            <Chip \r\n                label={`GR ${props.grSpeedList[idx].gr} / ${props.grSpeedList[idx].min} min`}\r\n                icon={icon}\r\n                className={classes.chip}\r\n                color={color}\r\n                clickable\r\n                key={idx}\r\n                onClick={ () => setSelectedChip(idx)}\r\n            />\r\n\r\n            )})\r\n        }\r\n\r\n        {(errTextSelectChip != null) ?<Typography color=\"error\">{errTextSelectChip}</Typography> : null }\r\n        {(!(props.grSpeedList.length > 0)) ?<Typography color=\"error\">Add a run in compare runs view</Typography> : null }\r\n\r\n        </Box>\r\n\r\n        <Divider variant=\"middle\" />\r\n\r\n    </Box>\r\n\r\n    <Box className={classes.boksi} display=\"flex\" flexDirection=\"column\">\r\n    <Button \r\n          type=\"submit\"\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          style={{marginBottom : 10, marginTop : 10}}\r\n          fullwidth={true}\r\n          size=\"small\"\r\n        > Calculate </Button>\r\n    </Box>\r\n    </form>\r\n\r\n    <Paper>\r\n\r\n        {(showDeets)\r\n        ?     <TableContainer component={Paper} >\r\n                <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell className={classes.solu} align=\"left\">Current level</TableCell>\r\n                        <TableCell className={classes.solu2} align=\"left\">{msg[0].lvl_cur}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                        <TableCell className={classes.solu} align=\"left\">Target level</TableCell>\r\n                        <TableCell className={classes.sol2} align=\"left\">{msg[1].lvl_tar}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                        <TableCell className={classes.solu} align=\"left\">Exp needed</TableCell>\r\n                        <TableCell className={classes.solu2} align=\"left\">{`${numeral(msg[2].expNeeded).format('0.0 a')} exp `}</TableCell>\r\n                        \r\n                    </TableRow>\r\n                    <TableRow>\r\n                        <TableCell className={classes.solu} align=\"left\">@</TableCell>\r\n                        <TableCell className={classes.solu2} align=\"left\">{msg[3].at}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                        <TableCell className={classes.solu} align=\"left\">Runs:</TableCell>\r\n                        <TableCell className={classes.solu2} align=\"left\">\r\n                            {`${msg[4].runs} ${msg[8].expPerRun} `}\r\n                            \r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                        <TableCell className={classes.solu} align=\"left\">Time</TableCell>\r\n                        <TableCell className={classes.solu2} align=\"left\">{msg[5].time}</TableCell>\r\n                    </TableRow>\r\n                    {(msg[9].showLeggos)\r\n                    ?<>\r\n                    <TableRow>\r\n                        <TableCell className={classes.solu} align=\"left\">Legendaries</TableCell>\r\n                        <TableCell className={classes.solu2} align=\"left\">{msg[6].leggos}</TableCell>\r\n                        \r\n                    </TableRow>\r\n                    <TableRow>\r\n                        <TableCell className={classes.solu} align=\"left\">Primals</TableCell>\r\n                        <TableCell className={classes.solu2} align=\"left\">{msg[7].primals}</TableCell>\r\n                    </TableRow>\r\n                    </>\r\n                    : null\r\n                    }\r\n                </TableHead>\r\n                </Table>\r\n            </TableContainer>\r\n        : null\r\n        }\r\n\r\n    </Paper>\r\n\r\n</>\r\n  );\r\n}\r\n\r\nexport default TargetLevel;","import { Box, Typography, Button, TextField } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useRef, useState} from 'react';\r\nimport {  List, ListItem, ListItemIcon, IconButton, ListItemText } from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EmojiEventsIcon from '@material-ui/icons/EmojiEvents';\r\nimport numeral from 'numeral';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n  \r\n  },\r\n  textbox: {\r\n          margin: theme.spacing(1),\r\n          size: \"small\"\r\n\r\n  },\r\n  paperi: {\r\n      margin: \"10px\"\r\n  },\r\n  boksi: {\r\n    marginTop:\"10px\",\r\n  },\r\n  icon:{\r\n    color:\"red\"\r\n  },\r\n  textgreen:{\r\n    color:\"green\",\r\n    fontSize:\"50\"\r\n\r\n  },\r\n  textred:{\r\n    color:\"red\"\r\n  },\r\n  trophy:{\r\n    color:\"gold\"\r\n  }\r\n}));\r\n\r\n\r\nfunction UserRiftingSpeed(props) {\r\n  const classes = useStyles();\r\n  const gr_level = useRef();\r\n  const time = useRef();\r\n  const [errPrompt, setErrPrompt] = useState({});\r\n  \r\n\r\n  const formHandler = (e) => {\r\n    e.preventDefault();\r\n    let err = {};\r\n\r\n    if (!gr_level.current.value) {\r\n        err = {...err, gr_level : \"Level between 1-150\"}\r\n    } else if (gr_level.current.value > 150 || gr_level.current.value < 1) {\r\n        err = {...err, gr_level : \"Level must be between 1-150\"}\r\n    } else if ( props.grSpeedList.some((o) => o.gr == gr_level.current.value)) {\r\n        err = {...err, gr_level : `Input already exists for gr: ${gr_level.current.value}.\r\n        You can remove an existing run by clicking the delete icon`}\r\n    }\r\n\r\n    if (!time.current.value){\r\n        err = {...err, time : \"Input minutes\"}\r\n    } else if (time.current.value <= 0) {\r\n      err = {...err, time : \"Cannot use 0 or negative numbers\"}\r\n    } else if (!isFinite(String(time.current.value))) {\r\n      err = {...err, time : \"Use dot as fraction separator\"}\r\n    }\r\n\r\n    if (Object.entries(err).length > 0) {\r\n        setErrPrompt({...err});\r\n      } else {\r\n        setErrPrompt({});\r\n        addToList(gr_level.current.value, time.current.value )\r\n        \r\n        }\r\n  }\r\n\r\n  const addToList = (gr, time) => {\r\n    let newItem = {gr : Number(gr), min : Number(time) };\r\n    let newObj = props.grSpeedList;\r\n    newObj.push(newItem);\r\n    props.calcExpHour(newObj);\r\n  }\r\n\r\n  const deleteFromList = (idx) => {\r\n    let newObj = [];\r\n    newObj = props.grSpeedList.filter(( ele, indeksi) => {\r\n      return(indeksi !== idx);\r\n    });\r\n\r\n    if (newObj.length > 0) {\r\n      props.calcFastest(newObj);\r\n    } else {\r\n      props.setGrSpeedList([]);\r\n    }\r\n    \r\n  }\r\n\r\n  // sort before rendering\r\n  const sortDesc = () => {\r\n    let arr = props.grSpeedList;\r\n\r\n    arr.sort(function(b, a){\r\n        var c = Number(a.prcntSpeed);\r\n        var d = Number(b.prcntSpeed);\r\n        return c-d;\r\n    })\r\n    return(arr);\r\n  }\r\n\r\n    return (\r\n    <Box>\r\n      \r\n      <form onSubmit={formHandler}>\r\n      <Box className={classes.boksi} display=\"flex\" flexDirection=\"column\">\r\n        <TextField\r\n        className={classes.textbox}\r\n        name=\"gr_level\"\r\n        label=\"GR level 1-150\"\r\n        type=\"number\"\r\n        inputRef={gr_level}\r\n        error={Boolean(errPrompt.gr_level)}\r\n        helperText={errPrompt.gr_level}\r\n        variant=\"filled\"\r\n        placeholder=\"Input GR level...\"\r\n        size=\"small\"\r\n      />\r\n      \r\n      <TextField\r\n        className={classes.textbox}\r\n        name=\"time\"\r\n        label=\"Time in minutes\"\r\n        inputRef={time}\r\n        error={Boolean(errPrompt.time)}\r\n        helperText={errPrompt.time}\r\n        variant=\"filled\"\r\n        placeholder=\"Minutes/run...\"\r\n        size=\"small\"\r\n      />\r\n\r\n    <Button\r\n          type=\"submit\"\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          name=\"add_btn\"\r\n          style={{marginBottom : 10, marginTop : 10}}\r\n          size=\"small\"\r\n         \r\n        > Add \r\n    </Button>\r\n      \r\n      <List >\r\n        { sortDesc().map( (key, idx) => {  \r\n          return (\r\n            <ListItem key={idx} divider={true}>\r\n              <ListItemText\r\n                primary={`GR ${props.grSpeedList[idx].gr} / ${props.grSpeedList[idx].min} min`}\r\n              />\r\n\r\n              { (props.grSpeedList[idx].prcntSpeed == 100 ? <EmojiEventsIcon className={classes.trophy}/> : null)}\r\n\r\n              <ListItemText\r\n                className={props.grSpeedList[idx].prcntSpeed == 100 ? classes.textgreen : classes.textred }\r\n                primary={`${props.grSpeedList[idx].prcntSpeed} %`}\r\n                secondary={`${numeral(props.grSpeedList[idx].expHr).format('0.0 a')} exp/Hr `}\r\n              />\r\n\r\n              <ListItemIcon>\r\n                <IconButton \r\n                  edge=\"end\"\r\n                  onClick={ () => deleteFromList(idx)}\r\n                >\r\n                  <DeleteIcon />\r\n                </IconButton>\r\n              </ListItemIcon>\r\n\r\n            </ListItem>\r\n                );\r\n            })}\r\n      </List>\r\n\r\n      </Box>\r\n      </form>\r\n\r\n    </Box>\r\n\r\n    );\r\n  }\r\n  \r\n  export default UserRiftingSpeed;","import TopNav from './components/TopNav';\nimport Seasonal from './components/Seasonal';\nimport TargetLevel from './components/TargetLevel';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport { Container } from '@material-ui/core';\nimport { useState, useEffect } from 'react';\nimport d3_data from \"./diablo_3_exp.json\"\nimport UserRiftingSpeed from './components/UserRiftingSpeed';\n\nfunction App() {\n  const [grSpeedList, setGrSpeedList] = useState([]);\n\n  // Calculate exp/hour for each entry\n  const calcExpHour = (arr) => {\n    let normalizedSpeed = 0;\n    let newObj = arr;\n    \n    newObj.map( (key, i)  => {\n      normalizedSpeed = (60/newObj[i].min);\n      newObj[i].expHr = d3_data.gr_completion_reward_exp[newObj[i].gr] * normalizedSpeed;\n    });\n\n    setGrSpeedList([...newObj])\n    calcFastest(newObj);\n    \n  }\n\n  // fastest run calculated in a loop\n  const calcFastest = (arr) => {\n    let test = \"\";\n    let newObj = arr;\n    let winnerIdx = 0;\n    let expHr = 0;\n    newObj.map( (key, i)  => {\n      if ( newObj[i].expHr >= expHr) {\n        expHr = newObj[i].expHr;\n        test = newObj[i].gr;\n        winnerIdx = i;\n      }\n    });\n    calcPercentSpeed(winnerIdx, newObj);\n  }\n\n  // calculates speed% to every entry in relation to the top expHour item\n  const calcPercentSpeed = (winnerIdx, arr) => {\n    let newObj = arr;\n    let bestRunExp = newObj[winnerIdx].expHr;\n    \n    newObj.map( (key, i)  => {\n      newObj[i].prcntSpeed = ((newObj[i].expHr/bestRunExp)*100).toFixed(2);\n    });\n    setGrSpeedList([...newObj]);\n  }\n\n  // localstorage save\n  const saveGrRuns = () => {\n    if (grSpeedList.length){\n     localStorage.setItem(\"gr_runs\", JSON.stringify(grSpeedList));\n    } else {\n      localStorage.removeItem(\"gr_runs\");\n    }\n  }\n\n  // localstorage get\n  const openGrRuns = () => {\n    if (localStorage.getItem(\"gr_runs\")) {\n      setGrSpeedList(JSON.parse(localStorage.getItem(\"gr_runs\")));\n    } else {\n      let newObj = [ { gr : 90, min : 5, expHr : 0}, { gr : 100, min : 7, expHr : 0}, ];\n      calcExpHour(newObj);\n    }\n  }\n\n  useEffect(() => {\n    openGrRuns();\n  }, [])\n\n  useEffect(() => {\n    saveGrRuns();\n  }, [grSpeedList])\n\n\n  return (\n    <Router>\n    <Container maxWidth=\"sm\">\n\n      <TopNav />\n\n      <Route path=\"/d3_paragon_calculator/compare\" component={TargetLevel} >\n        <TargetLevel\n          gr_data={d3_data.gr_completion_reward_exp}\n          data={d3_data.paragon_total_exp_req}\n          grSpeedList={grSpeedList}\n          setGrSpeedList={setGrSpeedList}\n          calcExpHour={calcExpHour}\n          calcFastest={calcFastest}\n          />\n      </Route>\n\n      <Route path=\"/d3_paragon_calculator/\"  exact component={UserRiftingSpeed} >\n        <UserRiftingSpeed \n          gr_data={d3_data.gr_completion_reward_exp}\n          \n          grSpeedList={grSpeedList}\n          setGrSpeedList={setGrSpeedList}\n          calcExpHour={calcExpHour}\n          calcFastest={calcFastest}\n          />\n      </Route>\n\n      {/* not shown on topnavigation */}\n      <Route path=\"/seasonal\" component={Seasonal}>\n        <Seasonal data={d3_data.paragon_total_exp_req}/>\n      </Route>\n\n    </Container>\n    </Router>\n  \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport '@fontsource/roboto';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}